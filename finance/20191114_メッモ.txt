export API_KEY=pk_d2959d952ce64fb7821f4b04b6113b11


72

147


株式のポートフォリオを管理できるウェブアプリであるC $ 50 Financeを実装しようとしています。このツールを使用すると、
実際の株式の実際の価格とポートフォリオの値を確認できるだけでなく、IEXに株式の価格を照会して、株式を購入（大丈夫、「購入」）
および販売（大丈夫、「販売」）することもできます。

実際、IEXではhttps://cloud-sse.iexapis.com/stable/stock/nflx/quote?token=API_KEYのようなURLを使用して、API（アプリケーション
プログラミングインターフェイス）を介して株価をダウンロードできます。 Netflixのシンボル（NFLX）がこのURLに埋め込まれている
ことに注意してください。それが、どのデータを返すかをIEXが知る方法です。 IEXではAPIキーを使用する必要があるため、そのリンクは
実際にはデータを返しません（詳細については少し説明します）が、そうする場合、次のようなJSON（JavaScript Object Notation）形式
の応答が表示されます。

中括弧の間に、各値をコロンで区切ったキーと値のペアのコンマ区切りリストがあることに注意してください。

この問題の配布コードに注目しましょう！

ここで、valueはその（貼り付けられた）値で、=の直前または直後にスペースはありません。また、後で再び必要になる場合に備えて、
その値をテキストドキュメントのどこかに貼り付けることもできます。

CS50のファイルブラウザで、finance.dbをダブルクリックして、phpLiteAdminで開きます。 Finance.dbにusersというテーブルが
どのように付属しているかに注目してください。その構造（つまり、スキーマ）を見てください。デフォルトでは、新規ユーザーは
どのようにして10,000ドルを現金で受け取ることに注意してください。ただし、閲覧するユーザー（行など）は（まだ！）ありません。

コマンドラインを使用する場合は、phpLiteAdminの代わりにsqlite3を使用してください。


Flaskの設定後、このファイルが応答のキャッシュを無効にする方法に注意してください
（CS50 IDEでデフォルトであるデバッグモードの場合）。ファイルに変更を加えてもブラウザが気付かないようにします。
次に、カスタムの「フィルター」usd、関数（helpers.pyで定義）を使用してJinjaを構成し、値を米ドル（USD）として
簡単にフォーマットできるようにする方法に注目してください。次に、Flaskのデフォルトである（デジタル署名された）
Cookie内にセッションを保存するのではなく、ローカルファイルシステム（つまり、ディスク）にセッションを保存する
ようにFlaskをさらに構成します。ファイルは、CS50のSQLモジュールを設定して、finance.dbを使用します。これは、
すぐに内容がわかるSQLiteデータベースです。


その後は、多数のルートがありますが、完全に実装されているのはログインとログアウトの2つだけです。
最初にログインの実装を読んでください。 （CS50のライブラリから）db.executeを使用して、finance.dbをクエリする
方法に注目してください。また、check_password_hashを使用してユーザーのパスワードのハッシュを比較する方法に注目してください。
最後に、セッションに自分のuser_id（INTEGER）を保存することで、ログインがユーザーのログインを「記憶」していることに
注目してください。この方法で、このファイルのルートのいずれかで、ログインしているユーザーがいる場合、
どのユーザーがログインしているかを確認できます。

ほとんどのルートが@login_required（helpers.pyでも定義されている関数）で「装飾」されていることに注意してください。
そのデコレータは、ユーザーがこれらのルートのいずれかにアクセスしようとした場合、ログインするためにまずログインに
リダイレクトされます。

ほとんどのルートがGETおよびPOSTをどのようにサポートするかに注目してください。それでも、それらのほとんどは（現時点では！）
まだ実装されていないため、単に「謝罪」を返します。


次にhelpers.pyを見てください。ああ、謝罪の実施があります。最終的にテンプレートapology.htmlをレンダリング
する方法に注目してください。また、謝罪で特殊文字を置き換えるために単に使用する別の関数、エスケープをそれ自身
の中で定義することも起こります。謝罪の内部での脱出を定義することにより、前者を後者だけに限定しました。
他の関数はそれを呼び出すことができません（または必要ありません）。

ファイルの次はlogin_requiredです。これが少し謎めいていても心配はありませんが、関数が別の関数をどのように
返すことができるか疑問に思った場合は、ここに例を示します！

その後、lookup、シンボル（NFLXなど）が与えられると、3つのキーを持つ辞書の形式で会社の株価を返します。
nameは値、strは会社名、値、その値はフロートです;シンボルは、値がstrで、ルックアップに渡されたときにその
シンボルがどのように大文字化されたかに関係なく、株式のシンボルの正規化された（大文字の）バージョンです。

ファイルの最後はusdです。これは、フロートを単純にUSDにフォーマットする短い関数です（たとえば、1234.56は
$ 1,234.56にフォーマットされます）。


現在ログインしているユーザーについて、ユーザーが所有している株式、所有している株式数、各株式の現在の価格、
各保有額の合計を要約したHTMLテーブルを表示するように、インデックスの実装を完了します。 （つまり、株価と価格の積）。
また、ユーザーの現在の現金残高と総計（つまり、株式の合計金額と現金）も表示します。

おそらく、複数のSELECTを実行する必要があるでしょう。テーブルの実装方法に応じて、GROUP BY、HAVING、SUM、
および/または対象のWHEREが見つかる場合があります。

オッズは、各銘柄のルックアップを呼び出すことです。